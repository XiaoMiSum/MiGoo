title: 标准测试用例
testelements:
  - testclass: JDBCDataSource
    variable_name: JDBCDataSource_var
    url: 'jdbc:mysql://47.106.232.130:3306/migoo?characterEncoding=utf8&useSSL=false&serverTimezone=GMT%2b8&failOverReadOnly=false'
    username: 'migoo'
    password: '123456qq'
    max_active: '10'
    max_wait: '60000'
configelements:
  - testclass: HttpDefaults
    method: post
    protocol: http
    host: migoo.xyz
PreProcessors:
  - testclass: jdbcpreprocessor
    datasource: JDBCDataSource_var
    query_type: select
    statement: 'select * from users;'
    extractors:
      - { testclass: jsonextractor, field: '$.user_name', variable_name: user_name }
      - { testclass: resultextractor, variable_name: result }
      - { testclass: regexextractor, field: '"id":"([0-9]+)","create_', variable_name: r_total, match_num: 0 }
PostProcessors:
  - testclass: jdbcpostprocessor
    datasource: JDBCDataSource_var
    query_type: select
    statement: 'select * from users;'
childs:
  - title: 标准HTTP取样器1
    testclass: httpsampler
    variables:
      username: migoo
    config:
      api: /api/login
      body: { userName: 'migoo', password: '123456qq', sign: '__digest(content=${username}123456qq)' }
    extractors:
      - { testclass: jsonextractor, field: '$.status', variable_name: status, match_num: 0 }
      - { testclass: jsonextractor, field: '$.data', variable_name: message, match_num: 0 }
    validators:
      - { testclass: responseassertion, field: status, expected: 200, rule: == }
      - { testclass: jsonassertion, field: '$.status', expected: 200, rule: '==' }
  - title: 标准HTTP取样器2
    testclass: httpsampler
    variables:
      username: migoo
    config:
      api: /api/login
      body: { userName: 'migoo', password: '123456qq', sign: '__digest(content=${username}123456qq)' }
    extractors:
      - { testclass: jsonextractor, field: '$.status', variable_name: status, match_num: 0 }
      - { testclass: jsonextractor, field: '$.data', variable_name: message, match_num: 0 }
    validators:
      - { testclass: responseassertion, field: status, expected: 200, rule: == }
      - { testclass: jsonassertion, field: '$.status', expected: 200, rule: '==' }